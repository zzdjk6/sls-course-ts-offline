service: auction-service

frameworkVersion: ^3.12.0

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-cloudside-plugin
  - serverless-offline

provider:
  name: aws
  region: ap-southeast-2
  runtime: nodejs14.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  environment:
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource:
        - ${self:custom.AuctionsTable.arn}
        - !Join ["/", ["${self:custom.AuctionsTable.arn}", "index", "statusAndEndDate"]]

resources:
  Resources:
    # ref: https://serverless-stack.com/chapters/configure-cognito-user-pool-in-serverless.html
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        # Generate a name based on the stage
        UserPoolName: ${self:provider.stage}-user-pool
        # Set email as an alias
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        # Generate an app client name based on the stage
        ClientName: ${self:provider.stage}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false

    AuctionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AuctionsTable-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: status
            AttributeType: S
          - AttributeName: endingAt
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: statusAndEndDate
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: endingAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

  # Print out the Id of the User Pool that is created
  Outputs:
    UserPoolId:
      Value:
        Ref: CognitoUserPool

    UserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient

functions:
  createAuction:
    handler: src/handlers/createAuction.handler
    events:
      - http:
          method: POST
          path: /auctions

  getAuctions:
    handler: src/handlers/getAuctions.handler
    events:
      - http:
          method: GET
          path: /auctions

  getAuction:
    handler: src/handlers/getAuctionById.handler
    events:
      - http:
          method: GET
          path: /auctions/{id}

  placeBid:
    handler: src/handlers/placeBid.handler
    events:
      - http:
          method: PATCH
          path: /auctions/{id}/bid

custom:
  AuctionsTable:
    name: !Ref AuctionsTable
    arn: !GetAtt AuctionsTable.Arn
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true
  serverless-offline:
    httpPort: 4000
    lambdaPort: 4002
    printOutput: true
